syntax = "proto3";

package hiai;

message InsertNewOps {
    repeated AippOpParams aipp_op = 1;
    repeated MultiShapeOpParams multi_shape_op = 2;
}

message InsertNewOpsV2 {
    repeated AippOpParamsV2 aipp_op = 1;
    repeated MultiShapeOpParams multi_shape_op = 2;
}

message AippOpParams {
    enum InputFormat {
        UNDEFINED = 0;
        YUV420SP_U8 = 1;
        XRGB8888_U8 = 2;
        RGB888_U8   = 3;
        YUV400_U8   = 4;
        ARGB8888_U8 = 5;
        YUYV_U8     = 6;
        YUV422SP_U8 = 7;
        AYUV444_U8  = 8;
        BGR888_U8 = 9;
        YUV444SP_U8 = 10;
        YVU444SP_U8 = 11;
    }

    enum ImageColorSpace {
        JPEG = 0;
        BT_601_NARROW = 1;
        BT_601_FULL = 2;
        BT_709_NARROW = 3;
    }

    enum AippMode {
        undefined = 0;
        static = 1;
        dynamic = 2;
    }

    enum RotationAngle {
        ROTATE_NONE = 0;
        ROTATE_90_DEGREE = 1;
        ROTATE_180_DEGREE = 2;
        ROTATE_270_DEGREE = 3;
    }

    // AIPP模式，区分静态AIPP和动态AIPP
    AippMode aipp_mode = 1;

    // related_input_rank参数为必填，类型为整型，配置范围>=0, <=输入Data算子的个数，默认值为0。
    // 标识对模型的第几个输入做AIPP处理，例如模型有两个输入，需要对第2个输入做AIPP，则配置related_input_rank为1。
    repeated uint32 related_input_rank = 2;
    string input_name = 75;

    // input_edge_idx参数为可选，类型为整型，配置范围为>=0。
    // 配置该参数的作用，在于对Data算子不同的输出做不同的AIPP处理，如果该参数没有配置，默认对related_input_rank指定的模型输入的所有输出边做AIPP。
    // 配置值 <= Data算子输出边的个数。
    repeated uint32 input_edge_idx = 3;
    string node_after_aipp = 76;

    // [Begin] 动态AIPP参数，配置静态AIPP时无效
    repeated uint32 max_src_image_size = 4;

    // 是否支持旋转。默认不支持，开启支持旋转时，会有额外的空间和性能损失
    bool support_rotation = 5;
    // [End] 动态AIPP参数


    // [Begin] 静态AIPP参数，配置动态AIPP时无效
    InputFormat input_format = 51;
    bool csc_switch = 52;
    bool csc_dynamic = 80;
    InputFormat output_format = 87;
    ImageColorSpace color_space = 88;
    float cpadding_value = 53;

    bool swap_dynamic = 81;
    bool rbuv_swap_switch = 54;
    bool ax_swap_switch = 55;
    bool single_line_mode = 56;

    uint32 src_image_size_w = 57;
    uint32 src_image_size_h = 58;

    bool crop = 59;
    bool crop_dynamic = 82;
    uint32 load_start_pos_w = 60;
    uint32 load_start_pos_h = 61;
    uint32 crop_size_w = 62;
    uint32 crop_size_h = 63;

    bool resize = 64;
    bool resize_dynamic = 83;
    uint32 resize_output_w = 65;
    uint32 resize_output_h = 66;

    bool padding = 67;
    bool padding_dynamic = 84;
    uint32 left_padding_size = 68;
    uint32 right_padding_size = 69;
    uint32 top_padding_size = 70;
    uint32 bottom_padding_size = 71;
    float padding_value_chn_0 = 89;
    float padding_value_chn_1 = 90;
    float padding_value_chn_2 = 91;
    float padding_value_chn_3 = 92;

    repeated bool dtc_switch = 77;
    bool dtc_dynamic = 85;
    int32 mean_chn_0 = 10;
    int32 mean_chn_1 = 11;
    int32 mean_chn_2 = 12;
    int32 mean_chn_3 = 72;
    float min_chn_0 = 13;
    float min_chn_1 = 14;
    float min_chn_2 = 15;
    float min_chn_3 = 73;
    repeated float var_reci_chn_0 = 16;
    repeated float var_reci_chn_1 = 17;
    repeated float var_reci_chn_2 = 18;
    repeated float var_reci_chn_3 = 74;

    repeated int32 matrix_r0c0 = 30;
    repeated int32 matrix_r0c1 = 31;
    repeated int32 matrix_r0c2 = 32;
    repeated int32 matrix_r1c0 = 33;
    repeated int32 matrix_r1c1 = 34;
    repeated int32 matrix_r1c2 = 35;
    repeated int32 matrix_r2c0 = 36;
    repeated int32 matrix_r2c1 = 37;
    repeated int32 matrix_r2c2 = 38;
    repeated int32 output_bias_0 = 39;
    repeated int32 output_bias_1 = 40;
    repeated int32 output_bias_2 = 41;
    repeated int32 input_bias_0 = 42;
    repeated int32 input_bias_1 = 43;
    repeated int32 input_bias_2 = 44;

    bool rotation = 78;
    bool rotation_dynamic = 86;
    float rotation_angle = 79;
    // [End] 静态AIPP参数
}

message AippOpParamsV2 {

    message CropFunc {
        bool switch = 1;
        bool dynamic = 6;
        uint32 load_start_pos_w = 2;
        uint32 load_start_pos_h = 3;
        repeated uint32 crop_size_w = 4;
        repeated uint32 crop_size_h = 5;
    }

    message ResizeFunc {
        bool switch = 1;
        bool dynamic = 4;
        repeated uint32 resize_output_w = 2;
        repeated uint32 resize_output_h = 3;
    }

    message PaddingFunc {
        bool switch = 1;
        bool dynamic = 6;
        uint32 left_padding_size = 2;
        uint32 right_padding_size = 3;
        uint32 top_padding_size = 4;
        uint32 bottom_padding_size = 5;
        float padding_value_chn_0 = 7;
        float padding_value_chn_1 = 8;
        float padding_value_chn_2 = 9;
        float padding_value_chn_3 = 10;
    }

    message ChannelSwapFunc {
        bool dynamic = 3;
        bool rbuv_swap_switch = 1;
        bool ax_swap_switch = 2;
    }

    message CscFunc {
        bool switch = 1;
        bool dynamic = 17;
        InputFormat output_format = 18;
        ImageColorSpace color_space = 19;
        repeated int32 matrix_r0c0 = 2;
        repeated int32 matrix_r0c1 = 3;
        repeated int32 matrix_r0c2 = 4;
        repeated int32 matrix_r1c0 = 5;
        repeated int32 matrix_r1c1 = 6;
        repeated int32 matrix_r1c2 = 7;
        repeated int32 matrix_r2c0 = 8;
        repeated int32 matrix_r2c1 = 9;
        repeated int32 matrix_r2c2 = 10;
        repeated int32 output_bias_0 = 11;
        repeated int32 output_bias_1 = 12;
        repeated int32 output_bias_2 = 13;
        repeated int32 input_bias_0 = 14;
        repeated int32 input_bias_1 = 15;
        repeated int32 input_bias_2 = 16;
    }

    message DtcFunc {
        bool switch = 1;
        bool dynamic = 14;
        int32 mean_chn_0 = 2;
        int32 mean_chn_1 = 3;
        int32 mean_chn_2 = 4;
        int32 mean_chn_3 = 5;
        float min_chn_0 = 6;
        float min_chn_1 = 7;
        float min_chn_2 = 8;
        float min_chn_3 = 9;
        repeated float var_reci_chn_0 = 10;
        repeated float var_reci_chn_1 = 11;
        repeated float var_reci_chn_2 = 12;
        repeated float var_reci_chn_3 = 13;
    }

    message RotationFunc {
        bool switch = 1;
        bool dynamic = 3;
        repeated float rotation_angle = 2;
    }

    message InputShape {
        uint32 src_image_size_w = 1;
        uint32 src_image_size_h = 2;
    }

    enum InputFormat {
        UNDEFINED = 0;
        YUV420SP_U8 = 1;
        XRGB8888_U8 = 2;
        RGB888_U8   = 3;
        YUV400_U8   = 4;
        ARGB8888_U8 = 5;
        YUYV_U8     = 6;
        YUV422SP_U8 = 7;
        AYUV444_U8  = 8;
        BGR888_U8 = 9;
        YUV444SP_U8 = 10;
        YVU444SP_U8 = 11;
    }

    enum ImageColorSpace {
        JPEG = 0;
        BT_601_NARROW = 1;
        BT_601_FULL = 2;
        BT_709_NARROW = 3;
    }

    enum AippMode {
        undefined = 0;
        static = 1;
        dynamic = 2;
    }

    message InputPara {
        InputFormat format = 1;
        InputShape shape = 2;
        repeated uint32 max_src_image_size = 3;
    }

    repeated uint32 related_input_rank = 1;
    string input_name = 2;

    repeated uint32 input_edge_idx = 3;
    string node_after_aipp = 4;

    bool support_rotation = 5;
    float cpadding_value = 6;
    bool single_line_mode = 7;

    InputPara input_para = 8;

    CropFunc crop_func = 12;
    ChannelSwapFunc swap_func = 13;
    CscFunc csc_func = 14;
    ResizeFunc resize_func = 15;
    DtcFunc dtc_func = 16;
    PaddingFunc padding_func = 17;
    RotationFunc rotation_func = 18;
}


message MultiShapeOpParams {
    enum MultiShapeMode {
        batch      = 0;             //动态batch
        resolution = 1;             //动态分辨率，扩展用
    }

    MultiShapeMode    mode                      = 1;        //算子模式
    uint32            related_input_rank        = 2;        //新增算子插入到哪个输入


    repeated uint32 batch_list   = 11; //batch_list值，batch_list的个数是2到8之间
}
